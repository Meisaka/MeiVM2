
Meisaka Wave2 Vector RISC CPU

8 Constant registers (CPU readonly, can be written as inputs)
7 General registers  (CPU can be read/write from all address spaces)
1 Instruction register (special, but used like a general register)

All CPU registers are SIMD, and hold a vector of 4x 16bit words
A few special instructions, will treat registers as 8x 8bit words

Each memory address holds a single 16 bit word
i.e. 0x0000 => 0xABCD, 0x0001 => 0xEF39

All CPU registers are accessable from load/store
as if the registers are memory locations.
Each CPU core also has an amout of built-in RAM

CPU register words are loaded and stored in little endian order:
 i.e. the instruction pointer is at address 0x060
Bytes from APIs are imported into words in little endian order.
Bytes from user writes (write | code) are:
big endian within each 16 bit word,
words are then written to memory in little endian order

Wave2 is emulated in a multi user simulation.
Every user get's their own "CPU" which can have multiple cores or "threads."
A region of the Wave2 CPU's memory space is shared access by all CPUs in the simulation.

The program counter (PC) is vector 0 (X) from the instruction register.
Instruction opcodes are 16 bits and use one address worth of memory.
Instruction fetch is assumed to be non-speculative and fully coherent
thus, self-modifing code and inline variable storage are possible.

Register Names and Index values:
 0x0 ..= 0x7 => constant "C" registers 0 through 7 (c0, c1, c2, c3, c4, c5, c6, c7) respectively
 0x8 ..= 0xE => general "R" registers 0 through 6 (r0, r1, r2, r3, r4, r5, r6) respectively
 0xF         => instruction register (Ri, ri, or r7)
    Ri word 0 ("x") is the program counter (PC) aka instruction pointer
    Ri words 1 to 3 ("y", "z", "w") are general use
    Ri can be used as a mini-stack via the swizzle instruction
All registers are memory mapped and can be read via memory load
C registers:
 - are not (directly) writable by most CPU instructions
 - can be overwritten using the I/O space
 - can be written using special chat commands
R registers:
 - are fully read/write by CPU instructions
 - can be written via memory stores to their respective address
 - can be written using special chat commands
 - the instruction register (Ri) is an R register
The PC in Ri will always point at the next instruction to fetch
 the PC can then be changed during execution of each instruction
 to affect control flow, it can be:
 - loaded from to get PC relative values
 - stored or swizzled to create calls or loops
 - overwritten to jump
 - added or subtracted to branch
 - subtracted by the results of conditional instructions
   for conditional skips over the next instruction
 - incremented to skip/load/store inline values and instructions

System memory map:
   0(0x0000) ..=    31(0x001F) => System constant registers, accessible via load
  32(0x0020) ..=    63(0x003F) => System mutable registers, accessible via load/store
  64(0x0040) ..=   255(0x00FF) => Non-volatile Thread private RAM
 256(0x0100) ..=   767(0x02FF) => Non-volatile Thread banked RAM area
 768(0x0300) ..=  1023(0x03FF) => VM and Ship I/O control area
1024(0x0400) ..=  2047(0x07FF) => Remote memory access aperture
2048(0x0800) ..=  4095(0x0FFF) => Volatile private RAM
4096(0x1000) ..= 12288(0x2FFF) => Shared RAM (all user threads can read/write)

within the memory map, the "pre-loadable" memory is a block of memory that can
be written, using the "!vm code ..." or "!vm write ..." commands.
Additionally, it is generally non-volatile, and can be expected to be persisted.
Memory outside the "pre-loadable" range can not be written via chat commands
only the CPU itself can access the other regions.

            +0   +1   +2   +3  Address
          +----+----+----+----+
c0 0x0000 |  X |  Y |  Z |  W | 0x0000  (beginning of !vm write)
:     :   |    |    |    |    |    :
c7 0x001c |  X |  Y |  Z |  W | 0x001f
          +----+----+----+----+
r0 0x0020 |  X |  Y |  Z |  W | 0x0020
:     :   |    |    |    |    |    :
r6 0x0038 |  X |  Y |  Z |  W | 0x003b
          +----+----+----+----+
ri 0x003c | pc |  Y |  Z |  W | 0x003f
          +----+----+----+----+
            +0   +1   +2   +3  Address
          +----+----+----+----+         <- start of address wrap
   0x0040 |  P    P    P    P | 0x0043  (beginning of !vm code)
      :   |   Private Memory  |    :     192 words
   0x00fc |  P    P    P    P | 0x00ff
          +----+----+----+----+
   0x0100 | BP   BP   BP   BP | 0x0103  (banked memory ROM or persist RAM)
      :   |   Private Memory  |    :     512 words
   0x02fc | BP   BP   BP   BP | 0x02ff  (end of pre-loadable memory)
          +----+----+----+----+         <- end of address wrap
   0x0300 |                   | 0x0303  (Module I/O, VM control and ship modules)
      :   |                   |    :
   0x03fc |                   | 0x03ff
          +----+----+----+----+         <-
   0x0400 |0000 0000 0000 0000| 0x0403  (agent remote memory aperture)
      :   |                   |    :
   0x07fc |0000 0000 0000 0000| 0x07ff
          +----+----+----+----+         <-
   0x0800 |  M    M    M    M | 0x0803  (volatile private memory area)
      :   |                   |    :
   0x0ffc |  M    M    M    M | 0x0fff
          +----+----+----+----+         <- end of private protection area
          +----+----+----+----+         <- start of address wrap and shared protection area
   0x1000 |  S    S    S    S | 0x1003  (shared memory aparture)
      :   |   Shared Memory   |    :
   0x2ffc |  S    S    S    S | 0x2fff
          +----+----+----+----+        <- end of address wrap

//// Memory and I/O space
 to control "the ship"
 - the ship: is visually a triangle floating around a wrapping 2D space
 - it has integrated physics (aka motion: impulse, velocity, acceleration, moment, mass)
 - ships spawn based on chat commands (or activity) in some random orientation,
   (planned: possibly with some default program)
 - ships have their own Wave2 core with these properties:
   - own C registers, R registers, Instruction register, and private memory area
   - own banked memory mapping, but banked memory can be accessed by all cores within the CPU
   - own I/O space mapping, but I/O devices are shared between cores within each CPU
   - remote aperture is shared with main core
   - shares the volatile private memory area with main core
   - same limitations on accessing the global shared memory area
   - the ship core is not required to actually control the ship, but does by default
   - the ship core can be halted indepantly of the main core
   - the ship core is not started nor halted by the typical chat commands

//// Shared Memory
Memory within the shared RAM range is visualized as blocky pixels
The display matrix is 256 pixels wide, by 32 pixels tall
Accending pixel addresses are rastered from left to right, top down.
Pixel address from position is: 0x1000 + (0x100 * Y) + X
The pixel format is rrrr rggg gggb bbbb => i.e. 0xf800 is pure RED
this mode is called RGB565

Memory accesses will behave differently depending on
where the CPU is currently executing instructions:
 - when PC is within private memory:
   + any action that increments an address (load, store, PC fetch)
     with the address 0x00ff: will wrap to 0x0040
     i.e. load with increment with address of 0x00fe
          will read from 0x00fe, 0x00ff, 0x0040, 0x0041
          the register will point at 0x0042 after.
   + loads and stores to private memory are atomic
   + loads and stores to volatile private memory are only atomic when
     address has alignment 4, i.e. (address modulo 4) equals 0
   + loads and stores to shared memory are non-atomic
     shared memory will be accessed a single word at a time
     and incur significant delay between words
 - when PC is within shared memory:
   + any action that increments an address (load, store, PC fetch)
     with the address 0x2fff: will wrap to 0x1000
   + loads and stores to private memory are non-atomic
     private memory will be accessed a single word at a time
     and incur significant delay between words
   + loads and stores to shared memory are only atomic when
     address has alignment 4, i.e. (address modulo 4) equals 0
     such access will be without delay
     non-aligned access will be non-atomic, and have only slight delay
   + registers should be used for fast transfer between memory regions
     loads and stores to the register area (via load/store) of private memory still incurs delays

//// Instruction set

Instructions are arranged in categories:
0x0 => System, 0x1 => WSelect, 0x2 => Extra2,  0x3 => Extra3,
0x4 => Move,   0x5 => Swizzle, 0x6 => Load,    0x7 => Store,
0x8 => Math8,  0x9 => Math16,  0xA => Shift8,  0xB => Shift16,
0xC => BitOp,  0xD => SpecOp,  0xE => Extra14, 0xF => Extra15

Encoding of fields within the opcode word:
<- msb           lsb ->
dddd  ssss   xxxx  oooo
dest source extra opcode
source and destination specify a register index, in the order described above.
Extra and the extra bits are for extended and future instructions,
if the instruction does not use bits within a field, they must be zero.

System executes special instructions based on extra bits:
0x0000=> Halt the thread
0x__10=> Sleep will suspend the thread for a certain number of ticks
 0x0010 => SleepNop - any sleep duration of zero acts like a no-op.
 the lower 3 bits of the destination field control the sleep duration:
 0x0n10 => source field used as a number of ticks (n = 0 to 15)
 0x1s10 => lowest byte of source register as number of ticks
 0x2s10 => high byte of the lowest word of source register as number of ticks
 0x3s10 => lowest word of source register as number of ticks

The (0x1) WSelect opcodes perform an operation on a single word from
the source register to the X element of the destination register
the extra bits are used to select which word from source register
and which operation to perform:
 -> word select: 0b00__=> X, 0b01__=> Y, 0b10__=> Z, 0b11__=> W
operators:
0b__00 => (WMove) copy source word to destination X
0b__01 => (WSwap) swap source word with destination X
0b__10 => (WAdd ) add source word to destination X         // dst.x = dst.x + src.*
                  put result in destination X
0b__11 => (WSub ) subtract source word from destination X  // dst.x = dst.x - src.*
                  put result in destination X

(0x4) Move copies source register words to destination register
 -> extra bits set to one will not copy the respective word (performs a "Mix" operation)
(0x5) Swizzle re-arranges or copies the destination register words according to bits in "extra" and "source"
 -> given register [X,Y,Z,W] source: 0bWWZZ, extra: 0bYYXX
 -> every two bit index specifies which source words to swizzle from.
(0x6) Load and (0x7) Store use the word(s) in the source register as an address
 -> (0x6) Load copies memory into the destination register
 -> (0x7) Store copies destination register into memory
 -> "extra" bits used as modifiers:
 -> upper 2 bits of extra, specify the number of words to load or store
    (words are always accessed starting at X):
    0x0 => 4 words, dst: XYZW
    0x4 => 3 words, dst: XYZ
    0x8 => 2 words, dst: XY
    0xC => 1 word,  dst: X
 -> lower 2 bits of extra, specify the mode:
access words sequentially
word X from source as address
increments the access address after each load/store
 0x0 -> Load    / Store    - source register unchanged
 0x1 -> LoadInc / StoreInc - updates source register with address after last access
scatter/gather modes
respective XYZW words in source used as address for
the matching XYZW values to/from destination register
increments each access address by 1 after the load/store
 0x2 -> Gather    / Scatter    - source register unchanged
 0x3 -> GatherInc / ScatterInc - updates source register with accessed elements incremented
useful special Load/Store encodings:
LoadInl1 R_.x   , #n       => 0x_fd6 0xNNNN
LoadInl2 R_.xy  , #n,n     => 0x_f96 0xNNNN 0xNNNN
LoadInl3 R_.xyz , #n,n,n   => 0x_f56 0xNNNN 0xNNNN 0xNNNN
LoadInl4 R_.xyzw, #n,n,n,n => 0x_f16 0xNNNN 0xNNNN 0xNNNN 0xNNNN

Skip1 => 0x0fd6 // skip the next instruction or word of data
Skip2 => 0x0f96 // skip the next 2 instructions or words of data
Skip3 => 0x0f56 // skip the next 3 instructions or words of data
Skip4 => 0x0f16 // skip the next 4 instructions or words of data

Skip encodes C0 as the destination, only C0 should be used
other C registers as destinations are reserved for future use
and may have undesired side affects.

The "#" is the vector size in number of bits, which can be 8 or 16
each group of vector size bits will be operated on independantly of other vector bits
operations are in parallel across all vector bits between the registers

(0x8/0x9) Math# opcodes use source register as left hand and destination register as right
 -> extra bits used to select math operation:
 0x0 => Add     (dest =  src + dest)
 0x1 => Sub     (dest =  src - dest)
 0x2 => RSub    (dest = dest -  src)
 0x3 => Eq      (equal: -1, not equal: 0)
 0x4 => Carry      Carry( src + dest) (No carry: 0, carry: -1)
 0x5 => LessU      Carry( src - dest) (src >= dest: 0, src < dest: -1) unsigned
 0x6 => GreaterU   Carry(dest -  src) (src <= dest: 0, src > dest: -1) unsigned
 0x7 => NotEq   (equal: 0, not equal: -1)
 0x8 => AddSat  (dest =  src + dest) (Signed Saturate)
 0x9 => SubSat  (dest =  src - dest) (Signed Saturate)
 0xA => RSubSat (dest = dest -  src) (Signed Saturate)
 0xB => GreaterEqU Carry( src - dest) (src < dest: 0, src >= dest: -1) unsigned
 0xC => AddOver     Over( src + dest) (overflow flips sign: -1, no overflow: 0)
 0xD => SubOver     Over( src - dest) (overflow flips sign: -1, no overflow: 0)
 0xE => RSubOver    Over(dest -  src) (overflow flips sign: -1, no overflow: 0)
 0xF => LessEqU    Carry(dest -  src) (src > dest: 0, src <= dest: -1) unsigned

(0xA/0xB) Shift# opcodes perform bitshifts on the destination register
 -> extra bits control shift:
 0b_000 => Left Shift,
 0b_001 => Right Shift (logical),
 0b_010 => Right Shift (sign extend)
 0b_011 => Left Rotate
 0b_100 => Left Shift (#-shift),
 0b_101 => Right Shift (#-shift) (logical),
 0b_110 => Right Shift (#-shift) (sign extend)
 0b_111 => Right Rotate
 0b0___ => Low (#8 => 3, #16 => 4) bits of source register words as shift amount
 0b1___ => source field as shift amount

(0xC) BitOp performs a binary operation on source and destination
 -> extra bits specify the operation:
 0x0 =>  One, 0xF => All
 0x8 =>  And, 0xE =>  Or, 0x6 =>  Xor
 0x7 => Nand, 0x1 => Nor, 0x9 => Xnor
 0xA => Swap
 0xC => (reserved, currently no-op)
 0x5 => NotSrc, 0x3 => NotDest
 0x2 => Src And NotDest (Dest Clears Src)
 0x4 => NotSrc And Dest (Src Clears Dest)
 0xB => Src Or NotDest
 0xD => NotSrc Or Dest

(0xD) SpecOp extra math operations
 -> extra bits used to select operation:
 0x0 => Horizontal Add: dest.xyzw = src.x + src.y + src.z + src.w
 0x1 => MultSat: dst = src * dst, Unsigned, components that would overflow are clamped to 0xffff
 0x2 => MultLow: dst = src * dst, Unsigned, 32 bit multiplication, the low 16 bits are returned in dst
 0x3 => MultHi:  dst = (src * dst) >> 16, Unsigned, 32 bit multiplication, the upper 16 bits are returned in dst
 0x4 => Divide:  dst, src = (src / dst), (src mod dst), Unsigned,
        perform component-wise 16 bit division, return the quotient in dst, and remainder in src
        divisions of N by 0 result in a component quotient of 0xffff, with remainder N
        this operation may take a number of extra cycles to perform
 0x5 => RecpDivide: dst = (0x010000 / src), unsigned 17 bit divide
        divisions of N by 0 result in a component quotient of 0xffff
        this operation may take a number of extra cycles to perform

//// Example of instructions and their encodings:
Move r0, c0        => 8004  // move c0 into r0
ScatterInc r4, c5  => 5c37  // scatter store values in c5 at the 4 addresses in r4, incrementing each address
Swizzle.xxyz ri    => f905  // push pc onto a "stack" (ri.w = ri.z, ri.z = ri.y, ri.y = ri.x, ri.x = ri.x)
Xor r1, r1         => 996c  // clear r1 to all zero
CompareEq16 r0, r1 => 8979  // test each field of r0 against r1, store 0xffff or 0 into r0 fields
Move.yzw r0, r1    => 89e4  // move only y,z,w of r1 into r0, leaving r0.x unchanged
SubRev16 ri, r0    => f889  // compute ri - r0, put result into ri
                            // if r0 is set to 0 or 0xffff by a compare,
                            // this will conditionally skip the next instruction

//// Default Constant Registers:
0=> [0, 0, 0, 0]
1=> [0, 0, 0, 0]
2=> [0, 0, 0, 0]
3=> [0, 0, 0, 0]
// all 1
4=> [1, 1, 1, 1],
// max pixel field values for R, G, B, A (todo)
5=> [31, 63, 31, 0],
// R shift, G shift, B shift, A (todo)
6=> [11, 5, 0, 0]
// c7.x: start of shared RAM, c7.y: start of program,
// c7.z: start of I/O space, c7.w: pointer to current thread status register
7=> [0x1000, 0x0040, 0x300, 0x300 or 0x304]
standard registers default to all zero
instruction pointer will default to start of private RAM

//// Chat Commands
the !vm commands to control your thread:
!vm help  (link to this info page)
!vm halt      (stop your thread)
!vm run       (start your thread without affecting any registers)
!vm restart   (defaults the PC, then starts your thread)
!vm clear     (resets all thread memory and registers to their defaults)
!vm dump      (prints the current state of the VM to the terminal, not very useful remotely)
!vm color  <css_color>    (change the color of the ship to a CSS style color code or name)
!vm colour <css_colour>   (change the colour of the ship to a CSS style colour code or name)
!vm summon    (summon YOUR ship if not present, sets ship colour to your chat color)
!vm ident     (display a marker around your ship, so you can find it)
!vm write <data>
!vm code <data>
<data> for !vm "write" and "code" consists of stream of hex nibbles without any prefix
it's encoded from the most significant nibble first, to the least significant nibble last
i.e. the 0x123f 0x2014 values would be writen "123f2014"
all spaces or non-hex characters in input are ignored
except '!' or the alternate encoding symbols described below.
the presence of a ! in the input will end parsing of hex characters,
this will switch back to parsing sub-commands, a space is required after the '!'
any space before the '!' is optional and would be ignored.
i.e. "!vm halt write 1234! code 1234! restart"
"!vm write" starts at address 000, and thus write to the constant registers first
"!vm code" starts at address 040, and thus write to the private RAM

The write commands can not write outside of the preloadable memory range,
only running CPU threads may do so.

//// Alternate and Runic Encoding of values is supported:
ᚺ => 0x0, ᚾ => 0x1, ᛁ => 0x2, ᛃ => 0x3,
ᛈ => 0x4, ᛇ => 0x5, ᛉ => 0x6, ᛊ => 0x7,
ᛏ => 0x8, ᛒ => 0x9, ᛖ => 0xA, ᛗ => 0xB,
ᛚ => 0xC, ᛜ => 0xD, ᛞ => 0xE, ᛟ => 0xF,
0123 4567 89AB CDEF
0123 4567 89ab cdef
ᚺᚾᛁᛃ ᛈᛇᛉᛊ ᛏᛒᛖᛗ ᛚᛜᛞᛟ
0123 4567 89UV WXYZ
0123 4567 89uv wxyz
Any mixture of hex encoded digits are allowed
i.e. ᛈXᛗ9ᛊ0x0u42ᛟeᚺzᛒ
Additional commands are available as runes:
most of these require a prefix which is 0 to 3 hex values (or hex runes)
used as a parameter.
Parameter of 0 will run rune actions at least once.
[N]ᚢ => skip forward in the address space by N
ᚨ => skip forward a word without writting nor affecting other input
[N]× => right align and write current value N
[N]ᚲ => left align and write current value N
   the parameter to the align runes is used as an incomplete word
   slightly useful for short values
[N]ᚠ => write N words consisting of 0000
[N]ᚱ => repeat the "last written" value 1 or N times
        the ᚠ rune does not affect "last written"

//// VM and Ship Modules
 - "module 0" is always the control registers
 - a slot can be unmapped with ID: 0x0000, all registers in these slots will read as zero
 - control registers are a module that can be mapped
   into other slots by using the thead ID: 0x0001 or 0x0002
 - modules are memory mapped into the I/O control area (0x320 .. 0x3ff)
   by storing the desired module ID into the respective
   "Module slot selection" (TMS*) registers within the control area
 - Mapping a module ID will cause the module to "activate"
 - There are limits on the number of modules that can be active
 - The lowest numbered IDs have activation priority
 - The same module can be mapped into multiple slots at the same time
 - Modules will not lose their data nor configuration while unmapped
 - Modules can lose their configuration in the same volatile memory can
 - ship modules will have some default configuration
 - each module takes up 0x20 words
0x300 => VM and module control area
0x320 => module 1 default 0x1000 = CRS0
0x340 => module 2 default 0x1001 = CRS1
0x360 => module 3 default 0x0000 = unmapped
0x380 => module 4 default 0x4000 = flight controls module
0x3a0 => module 5 default 0x4040 = radar 0
0x3c0 => module 6 default 0x4050 = NAV 0
0x3e0 => module 7 default 0x4051 = NAV 1

 - each ship will have "radar" scanning module(s) that grant:
   - distance to objects (objects are detected within a narrow cone)
   - configurable sweep angle
   - target information: target ID, distance
   - target ID can be used by "NAV" modules to obtain: distance, velocity, and headings
 - each ship will have "NAV" navigation modules that grant:
   - relative distance to target
   - reletive velocity to target
   - headings to target
   - able to accept the target ID from radar modules
   - able to target absolute coordinates
 - each ship has a laser comm device:
   - remote memory access to a target which is within line-of-sight
   - must be facing the front of another ship to access it, the target ship can not be accessed from other sides
   - remote access is limited to the volatile memory area of the other ship

//// Ship Local Coordinate System
   Axiis            Headings
                     0x0000
    +Y                  ^
    /\          0x7000  |  0x1000
   /  \               \ | /
-X/    \+X  0x6000 <----*----> 0x2000
 /      \             / | \
 +-|--|-+       0x5000  |  0x3000
    -Y                  v
                     0x4000

//// Fields common to all modules:
0    = (R  ) always reads as zero
M    = (R/W) scratch memory, these may be freely written with any value

//// VM Control Area (VCA)
TSTA = (RMW) Thread status,
    bit 0: Set = Running, Clear = Halted
    (this bit can be set to start the thread, can not be cleared by writing)
    See Thread Start below.
    other bits may be non zero
TID  = (R  ) Thread ID, this is also the module ID for the VCA
TER  = (R/W) Thread exception register save
TRI  = (R/W) Thread instruction register save
TCI  = (R  ) Thread current instruction word
TCRL = (R/W) (Read: 0) (Write: Copy Constant Register stores to threads C registers)
TUID = (R  ) Thread user ID
TPRT = (R/W) Thread protection (only applies while the thread is running):
    bits 1,0:  private memory area (PMA) from volatile private area (VPMA)
            PMA access, while PC points at the volatile private memory area:
        00 = no protection
        01 = readonly, writes ignored
        10 = read as zero, writes ignored
        11 = any access raises exception
    bits 3,2:  private memory area (PMA) from shared memory (SMA)
            PMA access, while PC points at shared memory:
        00 = no protection
        01 = readonly, writes ignored
        10 = read as zero, writes ignored
        11 = any access raises exception
    bits 5,4:  volatile private area (VPMA) from shared memory (SMA)
            VPMA access, while PC points at shared memory:
        00 = no protection
        01 = readonly, writes ignored
        10 = read as zero, writes ignored
        11 = any access raises exception
    bit 6: set = prevent TER, TRI writes from other threads
    bit 7: set = prevent TBK, TMS, CRS, TCRL writes from other threads
    bit 8: set = exception on PC in private memory (callback protection)
    bit 9: set = exception on PC in volatile private memory
    bit 10: set = exception on PC in shared memory
    bit 11: future use
    bit 12: set = exception on thread halt and invalid instructions
    bit 13: set = exception on thread sleep instructions
    bit 14: future use
    bit 15: future use
TBK  = (R/W) Thread Bank Select
    this register is mirrored in two different words
    they both hold the same value and writing to either will set the other
TMS* = (R/W) Thread module selection (contains a module ID)

T+0x00 (0x300) [ TSTA, TID , -- TPRT -- ]
T+0x04 (0x304) [ TCRL, ----- TUID ----- ]
T+0x08 (0x308) [ -------- TER  -------- ]
T+0x0c (0x30c) [ -------- TRI  -------- ]
T+0x10 (0x310) [ 0000, TBK , TBK , f000 ]
T+0x14 (0x314) [ 0   , 0   , 0   , 0    ]
T+0x18 (0x318) [ TID , TMS1, TMS2, TMS3 ]
T+0x1c (0x31c) [ TMS4, TMS5, TMS6, TMS7 ]

//// Thread Start
When TSTA bit 0 goes from unset to set
from any thread writing to this register
A thread start will be performed on the thread that this VCA controls:
 - TPRT settings will be applied
 - TPRT will protect itself from other threads
 - TRI  will be loaded into Ri
 - TUID is updated
 - C registers will be loaded from this thread's Constant Register Store
 - The thread will begin running instructions

//// Exceptions
The VCA gives access to exceptions management:
An exception when triggered will:
 - Save Ri to the TRI register in the VCA
 - Clear the private memory exceptions bit in TPRT
 - Load Ri with the contents of TER from the VCA
 - If Ri.PC points at the VCA, the CPU will halt
 - Set TER to [0x0308, 0, 0, 0]
   this makes TER point at itself within the VCA
   you are expected to reload TER if you want to handle further exceptions

//// Constant Register Store (Module ID: 0x1000 thread 0 CRS, 0x1001 thread 1 CRS)
CS** = (R/W) values used to reload all the C registers with
C+0x00 [ CS0x, CS0y, CS0z, CS0w ]
C+0x04 [ CS1x, CS1y, CS1z, CS1w ]
C+0x08 [ CS2x, CS2y, CS2z, CS2w ]
C+0x0c [ CS3x, CS3y, CS3z, CS3w ]
C+0x10 [ CS4x, CS4y, CS4z, CS4w ]
C+0x14 [ CS5x, CS5y, CS5z, CS5w ]
C+0x18 [ CS6x, CS6y, CS6z, CS6w ]
C+0x1c [ CS7x, CS7y, CS7z, CS7w ]

//// Ship Control Modules
MSTS = (R  ) Module status
MMID = (R  ) Module ID

//// Flight Control Module (Module ID: 0x4000)
 - there is only one flight control module, it is always active even if not mapped.
RRV  = (R/W) requested relative velocity - X and Y in signed 16b in 8.8 format
CRV  = (R  ) current relative velocity - X and Y in signed 16b in 8.8 format
RH   = (R/W) requested absolute/relative heading - signed 16b in 8.8 format
CAH  = (R  ) absolute heading
EEN  = (R/W) engine controls bitflags:
        bit 0 - set: allow Y+ engine to change velocity
        bit 1 - set: allow Y- engine to change velocity
        bit 2 - set: allow X+ engine to change velocity
        bit 3 - set: allow X- engine to change velocity
        bit 4 - set: allow engines to change heading
        bit 5 - heading mode - set: absolute, clear: relative
SHCC = (R/W) set Ship colour
SHCM = (R/W) background mix (0x00 - ship matches background, 0xff - ship matches set colour)

// Flight control memory layout overview:
//     (default mapping)
F+0x00 (0x380) [ MSTS, MMID, 0   , 0    ]
F+0x04 (0x384) [ RRVx, RRVy, M   , M    ]
F+0x08 (0x388) [ CRVx, CRVy, 0   , 0    ]
F+0x0c (0x38c) [ RH  , M   , M   , M    ]
F+0x10 (0x390) [ CAH , 0   , 0   , 0    ]
F+0x14 (0x394) [ EEN , M   , M   , M    ]
F+0x18 (0x398) [ 0   , 0   , 0   , 0    ]
F+0x1c (0x39c) [ SHCC, SHCM, 0   , 0    ]

//// Radar/Scanning functions (Module IDs: 0x4040 - 0x4047)
 - up to 4 scanner modules can be active at once

RSSH = (R/W) select scan heading, 0x0000 - 0x7fff (select scan heading), 0xffff (auto scan)
RHLS = (R  ) heading of last scan
RNSR = (R  ) number of signatures returned
RSDT = (R  ) distance to signature - unsigned 16b in 8.8 format
RSID = (R  ) signature ID

//     Radar0 (default mapping)
R+0x00 (0x3a0) [ MSTS, MMID, 0   , 0    ]
R+0x04 (0x3a4) [ RSSH, 0   , RHLS, RNSR ]
R+0x08 (0x3a8) [ RSDT, ----- RSID ----- ]
R+0x0c (0x3ac) [ RSDT, ----- RSID ----- ]
R+0x10 (0x3b0) [ RSDT, ----- RSID ----- ]
R+0x14 (0x3b4) [ RSDT, ----- RSID ----- ]
R+0x18 (0x3b8) [ RSDT, ----- RSID ----- ]
R+0x1c (0x3bc) [ RSDT, ----- RSID ----- ]

//// NAV Module (Module ID: 0x4050 - 0x4057)
 - up to 4 NAV modules can be active at once

NAS* = (R  ) current absolute screen X,Y pixel position
NTS* = (R/W) NAV Target absolute screen pixel X,Y
NTGT = (R/W) Target Selector (0 - Fixed point; 1 - Beacon; 2 - Nearest Signature; N - Signature)
NTGI = (R/W) Target ID (3 words)
NRD* = (R  ) NAV Target relative distance X,Y
NRV* = (R  ) NAV Target relative velocity X,Y
NAHT = (R  ) NAV Target absolute heading towards
NAHF = (R  ) NAV Target absolute heading away
NRHT = (R  ) NAV Target relative heading towards
NRHF = (R  ) NAV Target relative heading away

//      NAV0  NAV1 (default mappings)
N+0x00 (0x3c0/0x3e0) [ MSTS, MMID, 0   , 0    ]
N+0x04 (0x3c4/0x3e4) [ NASx, NASy, 0   , 0    ]
N+0x08 (0x3c8/0x3e8) [ NTSx, NTSy, M   , M    ]
N+0x0c (0x3cc/0x3ec) [ NTGT, ----- NTGI ----- ]
N+0x10 (0x3d0/0x3f0) [ NRDx, NRDy, 0   , 0    ]
N+0x14 (0x3d4/0x3f4) [ NRVx, NRVy, 0   , 0    ]
N+0x18 (0x3d8/0x3f8) [ NAHT, 0   , NAHF, 0    ]
N+0x1c (0x3dc/0x3fc) [ NRHT, 0   , NRHF, 0    ]

//// Examples

//// Encoding Swizzles
1111 2222 3333 4444
swizzle R0.wzxy
4444 3333 1111 2222
source 01 00 extra 10 11
encodes to 84d5

swizzle R0.yzwx
01 10 11 00
swap all of them
00 11 10 01
3     9
8395

R0 before 1111 2222 3333 4444
effects of swizzle R0.wzww
R0 after  4444 3333 4444 4444

//// Example of simple-ish program to clear/set shared memory
C0 = [0,0,0,0]
C1 = [0x1000] shared memory start address
8104 Move R0, C1           // copy the address to R0 so we can change it
f005 Swizzle Ri = Ri.xxxx  // save PC to next instruction
0817 StoreInc4 C0, R0      // write C0 to 4 words, increment R0.x by 4
f555 Swizzle Ri = Ri.yyyy  // copy saved address to PC so we loop
simple encoding:
write 0000 0000 0000 0000 1000 ! code 8104 f005 0817 f555
compressed encoding:
write 4ᚠ1ᚲᛃVᚢ8104z0050817f555

//// TOO DIZZY MAKE IT STOP
EEN(0394) = 0x003F - stop moving and no spin

0127 Scatter4 C0, C1

make the CPU write each of the first 4 values at the following repective 4 addresses:
!vm clear write 003f 4400 0000 0000 0394 038c 0000 0000! code 0127! restart

//// Pick 4 colours and rotate through them

// pick any 4 RGB565 colors, and this constant
maybe useful: https://rgbcolorpicker.com/565
!vm write 1111 2222 3333 4444   039c
example:
!vm write f834 46fb a2be fdc4   039c
!vm code 8004 f005 8395 81c7 3110 3110 f555
!vm restart

flight module default: 0380 + 0x1c (the color register)
=> 039c
load all the colors
8004 move R0, C0
f005 start of loop
8395 swizzle R0.yzwx
81c7 write R0.x to C1 (holding 0x039c)
3110 sleep.bl C1
3110 sleep.bl C1
f555 loop

how the swizzle works in this case:
1111 2222 3333 4444
swizzle yzwx
2222 3333 4444 1111
swizzle yzwx
3333 4444 1111 2222
swizzle yzwx
4444 1111 2222 3333
swizzle yzwx
1111 2222 3333 4444

//// Fly in a square... (maybe)
setup
wait for zero velocity:
	mini loop:
	read velocity
	compare to zero
	else loop
read compass
add a right turn to the compass:
	add 0x2000 to compass
	bitand result with 0x7fff so it makes sense to the heading controller
write the compass
read loop the compass waiting to reach the heading:
	mini loop
	read compass
	compare to written one
	not equal is a loop
request forward velocity
	write a value to the velocity request register
wait some time
	or we could wait for some velocity
request zero velocity:
	write zero to the velocity request register
loop around to the beginning


Planned Modules:
[ ] pew pew laser weapons, on a turret
[ ] missles????????????

Planned Features:
[ ] asteroids and/or stations as obsticles
[ ] ship to ship and ship station docking
[ ] Configurable increment wrap points
[ ] banked storage (that interacts with chat)
[ ] PvP stats: ships lost, ships destroyed
[ ] PvE stats: asteroids destroyed
[ ] asteroid gathering (for resources)
[ ] asteroid exchange at stations (for currency)
[ ] currency exchange at stations for modules and items
[ ] currency exchange via chat for modules
[ ] region of memory that switches based on chat emotes that are used
[ ] some banks will be "fixed" aka readonly
[ ] other banks will be user specific persistant writable storage
[ ] Wave threads will not have shared memory mapped to the start of shared memory
    instead, they will be randomly distributed around the shared memory via "the aperture"
[ ] "marker" in shared memory to allow programs to orient with the memory
[ ] The control page (web):
[ ] a built-in assembler
[ ] an editor (probably monaco, but maybe with like alternate keybinds for vim mode or emacs mode)
[ ] assembly debugger (local emulation)
[ ] debugger for the remote Wave
[ ] the ability to send or commuicate programs to the user's Wave VM
[ ] maybe the stream as an optional embed?
[ ] agent relative view on the page
[ ] ability to load pre-fab programs on the agent
    so that users need not know how to program
  [ ] boid logic
  [ ] follow
  [ ] wandering
  [ ] avoid things
  [ ] spine spine spine spine
  [ ] "attack"
[ ] chat bot reply with (compressed) VM state
[ ] banked storage persistance

planned visual elements:
[ ] direct integration with the chat box overlay and maybe the event overlay
[ ] different video formats
[ ] adding "tiled" modes, aka non-linear layouts
[ ] control of the alpha channel
[ ] private memory visual debugging

